{"version":3,"sources":["components/Authors.js","components/Books.js","components/NewBook.js","App.js","index.js"],"names":["Authors","props","show","authors","map","a","name","born","bookCount","Books","title","author","published","NewBook","useState","setTitle","setAuthor","setPublished","genre","setGenre","genres","setGenres","submit","event","preventDefault","console","log","onSubmit","value","onChange","target","type","onClick","concat","join","ALL_AUTHORS","gql","App","result","useQuery","page","setPage","data","allAuthors","p","loading","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"kMAoCeA,EAlCC,SAACC,GACf,IAAKA,EAAMC,KACT,OAAO,KAET,IAAMC,EAAUF,EAAME,QAEtB,OACE,gCACE,yCACA,gCACE,kCACE,+BACE,uBACA,sCAGA,0CAIDA,EAAQC,KAAI,SAAAC,GAAC,OACZ,+BACE,6BAAKA,EAAEC,OACP,6BAAKD,EAAEE,OACP,6BAAKF,EAAEG,cAHAH,EAAEC,kBCeRG,EAnCD,SAACR,GACb,IAAKA,EAAMC,KACT,OAAO,KAKT,OACE,gCACE,uCAEA,gCACE,kCACE,+BACE,uBACA,wCAGA,8CAbI,GAiBCE,KAAI,SAAAC,GAAC,OACV,+BACE,6BAAKA,EAAEK,QACP,6BAAKL,EAAEM,SACP,6BAAKN,EAAEO,cAHAP,EAAEK,mB,yBC6CRG,EArEC,SAACZ,GAAW,IAAD,EACCa,mBAAS,IADV,mBAClBJ,EADkB,KACXK,EADW,OAEGD,mBAAS,IAFZ,mBAElBH,EAFkB,KAEVK,EAFU,OAGSF,mBAAS,IAHlB,mBAGlBF,EAHkB,KAGPK,EAHO,OAICH,mBAAS,IAJV,mBAIlBI,EAJkB,KAIXC,EAJW,OAKGL,mBAAS,IALZ,mBAKlBM,EALkB,KAKVC,EALU,KAOzB,IAAKpB,EAAMC,KACT,OAAO,KAGT,IAAMoB,EAAM,uCAAG,WAAOC,GAAP,SAAAlB,EAAA,sDACbkB,EAAMC,iBAENC,QAAQC,IAAI,eAEZX,EAAS,IACTE,EAAa,IACbD,EAAU,IACVK,EAAU,IACVF,EAAS,IATI,2CAAH,sDAiBZ,OACE,8BACE,uBAAMQ,SAAUL,EAAhB,UACE,wCAEE,uBACEM,MAAOlB,EACPmB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBf,EAASe,EAAOF,aAG9C,yCAEE,uBACEA,MAAOjB,EACPkB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBd,EAAUc,EAAOF,aAG/C,4CAEE,uBACEG,KAAK,SACLH,MAAOhB,EACPiB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBb,EAAaa,EAAOF,aAGlD,gCACE,uBACEA,MAAOV,EACPW,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBX,EAASW,EAAOF,UAE5C,wBAAQI,QAnCC,WACfX,EAAUD,EAAOa,OAAOf,IACxBC,EAAS,KAiCwBY,KAAK,SAAhC,0BAEF,2CACWX,EAAOc,KAAK,QAEvB,wBAAQH,KAAK,SAAb,+B,gBC1DFI,EAAcC,YAAH,wGA6CFC,EAnCH,WAEV,IAAMC,EAASC,YAASJ,GAFR,EAGQrB,mBAAS,WAHjB,mBAGT0B,EAHS,KAGHC,EAHG,KAOhB,OAFAhB,QAAQC,IAAIY,EAAOI,KAAKC,WAAWvC,KAAI,SAAAwC,GAAC,OAAIA,MAExCN,EAAOO,QACF,6CAIP,gCACE,gCACE,wBAAQb,QAAS,kBAAMS,EAAQ,YAA/B,qBACA,wBAAQT,QAAS,kBAAMS,EAAQ,UAA/B,mBACA,wBAAQT,QAAS,kBAAMS,EAAQ,QAA/B,yBAGF,cAAC,EAAD,CACEvC,KAAe,YAATsC,EAAoBrC,QAASmC,EAAOI,KAAKC,aAGjD,cAAC,EAAD,CACEzC,KAAe,UAATsC,IAGR,cAAC,EAAD,CACEtC,KAAe,QAATsC,Q,gCCvCRM,EAAS,IAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXC,KAAM,IAAIC,IAAS,CACjBC,IAAK,4BAIRC,IAASC,OACN,cAACC,EAAA,EAAD,CAAgBT,OAAQA,EAAxB,SACA,cAAC,EAAD,MACoBU,SAASC,eAAe,W","file":"static/js/main.89304e2f.chunk.js","sourcesContent":["import React from 'react'\n\nconst Authors = (props) => {\n  if (!props.show) {\n    return null\n  }\n  const authors = props.authors\n\n  return (\n    <div>\n      <h2>authors</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>\n              born\n            </th>\n            <th>\n              books\n            </th>\n          </tr>\n          {authors.map(a =>\n            <tr key={a.name}>\n              <td>{a.name}</td>\n              <td>{a.born}</td>\n              <td>{a.bookCount}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n\n    </div>\n  )\n}\n\nexport default Authors","\nimport React from 'react'\n\nconst Books = (props) => {\n  if (!props.show) {\n    return null\n  }\n\n  const books = []\n\n  return (\n    <div>\n      <h2>books</h2>\n\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>\n              author\n            </th>\n            <th>\n              published\n            </th>\n          </tr>\n          {books.map(a =>\n            <tr key={a.title}>\n              <td>{a.title}</td>\n              <td>{a.author}</td>\n              <td>{a.published}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Books","import React, { useState } from 'react'\n\nconst NewBook = (props) => {\n  const [title, setTitle] = useState('')\n  const [author, setAuthor] = useState('')\n  const [published, setPublished] = useState('')\n  const [genre, setGenre] = useState('')\n  const [genres, setGenres] = useState([])\n\n  if (!props.show) {\n    return null\n  }\n\n  const submit = async (event) => {\n    event.preventDefault()\n    \n    console.log('add book...')\n\n    setTitle('')\n    setPublished('')\n    setAuthor('')\n    setGenres([])\n    setGenre('')\n  }\n\n  const addGenre = () => {\n    setGenres(genres.concat(genre))\n    setGenre('')\n  }\n\n  return (\n    <div>\n      <form onSubmit={submit}>\n        <div>\n          title\n          <input\n            value={title}\n            onChange={({ target }) => setTitle(target.value)}\n          />\n        </div>\n        <div>\n          author\n          <input\n            value={author}\n            onChange={({ target }) => setAuthor(target.value)}\n          />\n        </div>\n        <div>\n          published\n          <input\n            type='number'\n            value={published}\n            onChange={({ target }) => setPublished(target.value)}\n          />\n        </div>\n        <div>\n          <input\n            value={genre}\n            onChange={({ target }) => setGenre(target.value)}\n          />\n          <button onClick={addGenre} type=\"button\">add genre</button>\n        </div>\n        <div>\n          genres: {genres.join(' ')}\n        </div>\n        <button type='submit'>create book</button>\n      </form>\n    </div>\n  )\n}\n\nexport default NewBook\n","import React, { useState } from 'react'\nimport Authors from './components/Authors'\nimport Books from './components/Books'\nimport NewBook from './components/NewBook'\nimport { gql, useQuery } from '@apollo/client'\n\n\nconst ALL_AUTHORS = gql`\n  query {\n    allAuthors  {\n      name\n      born\n      id\n    }\n  }\n`\n\nconst App = () => {\n\n  const result = useQuery(ALL_AUTHORS)\n  const [page, setPage] = useState('authors')\n\n  console.log(result.data.allAuthors.map(p => p))\n\n  if (result.loading) {\n    return <div>loading...</div>\n  }\n\n  return (\n    <div>\n      <div>\n        <button onClick={() => setPage('authors')}>authors</button>\n        <button onClick={() => setPage('books')}>books</button>\n        <button onClick={() => setPage('add')}>add book</button>\n      </div>\n\n      <Authors\n        show={page === 'authors'} authors={result.data.allAuthors}\n      />\n\n      <Books\n        show={page === 'books'}\n      />\n\n      <NewBook\n        show={page === 'add'}\n      />\n\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache } from '@apollo/client'\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'http://localhost:4000',\n  })\n})\n\n ReactDOM.render(\n    <ApolloProvider client={client}>    \n    <App />\n    </ApolloProvider>,  document.getElementById('root')\n  )\n"],"sourceRoot":""}