{"version":3,"sources":["components/Authors.js","components/Books.js","components/NewBook.js","App.js","index.js"],"names":["EDIT_AUTHOR","gql","Authors","props","useState","name","setName","born","setBorn","useMutation","changeBornYear","submit","event","a","preventDefault","variables","show","authors","map","bookCount","onSubmit","value","onChange","target","type","Books","books","title","author","published","CREATE_BOOK","NewBook","setTitle","setAuthor","setPublished","genre","setGenre","genres","setGenres","createBook","parseInt","console","log","Number","onClick","concat","join","ALL_AUTHORS","ALL_BOOKS","App","resultOfAuthors","useQuery","pollInterval","resultOfBooks","page","setPage","data","allAuthors","allBooks","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.55f11cb0.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { gql, useMutation } from '@apollo/client'\n\n\nconst EDIT_AUTHOR = gql`\nmutation edit_author($name: String!, $setBornTo: Int!) {\n  edit_author(\n    name: $name,\n    setBornTo: $born,\n  ) {\n    name\n    born\n  }\n}\n`\n\nconst Authors = (props) => {\n\n  const [name, setName] = useState('')\n  const [born, setBorn] = useState('')\n\n  const [changeBornYear] = useMutation(EDIT_AUTHOR)\n\n  const submit = async (event) => {\n    event.preventDefault()\n\n    changeBornYear({ variables: { name, born } })\n    setName('')\n    setBorn('')\n  }\n\n  if (!props.show) {\n    return null\n  }\n  const authors = props.authors\n\n  return (\n    <div>\n      <h2>authors</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>\n              born\n            </th>\n            <th>\n              books\n            </th>\n          </tr>\n          {authors.map(a =>\n            <tr key={a.name}>\n              <td>{a.name}</td>\n              <td>{a.born}</td>\n              <td>{a.bookCount}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      <br></br>\n      <form onSubmit={submit}>\n        <h2>Set birthyear</h2>\n        <div>\n          author\n          <input\n            value={name}\n            onChange={({ target }) => setName(target.value)}\n          />\n        </div>\n        <div>\n          author\n          <input\n            value={born}\n            onChange={({ target }) => setBorn(target.value)}\n          />\n        </div>\n        <button type='submit'>update author</button>\n      </form>\n    </div>\n  )\n}\n\nexport default Authors","\nimport React from 'react'\n\nconst Books = (props) => {\n  if (!props.show) {\n    return null\n  }\n\n  const books = props.books\n\n  return (\n    <div>\n      <h2>books</h2>\n\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>\n              author\n            </th>\n            <th>\n              published\n            </th>\n          </tr>\n          {books.map(a =>\n            <tr key={a.title}>\n              <td>{a.title}</td>\n              <td>{a.author}</td>\n              <td>{a.published}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Books","import React, { useState } from 'react'\nimport { gql, useMutation } from '@apollo/client'\n\nconst CREATE_BOOK = gql`\nmutation createBook($title: String!, $author: String!, $published: Int!, $genres: [String!]!) {\n  addBook(\n    title: $title,\n    author: $author,\n    published: $published,\n    genres: $genres\n  ) {\n    title\n    author\n    published\n    genres\n  }\n}\n`\n\nconst NewBook = (props) => {\n  const [title, setTitle] = useState('')\n  const [author, setAuthor] = useState('')\n  const [published, setPublished] = useState('')\n  const [genre, setGenre] = useState('')\n  const [genres, setGenres] = useState([])\n\n  const [createBook] = useMutation(CREATE_BOOK)\n\n  if (!props.show) {\n    return null\n  }\n\n  const submit = async (event) => {\n    event.preventDefault()\n\n    createBook({ variables: { title, published: parseInt(published, 10), author, genres } })\n\n    console.log('add book...')\n\n    setTitle('')\n    setPublished('')\n    setAuthor('')\n    setGenres([])\n    setGenre('')\n  }\n\n  const addGenre = () => {\n    setGenres(genres.concat(genre))\n    setGenre('')\n  }\n\n  return (\n    <div>\n      <form onSubmit={submit}>\n        <div>\n          title\n          <input\n            value={title}\n            onChange={({ target }) => setTitle(target.value)}\n          />\n        </div>\n        <div>\n          author\n          <input\n            value={author}\n            onChange={({ target }) => setAuthor(target.value)}\n          />\n        </div>\n        <div>\n          published\n          <input\n            type='number'\n            value={Number(published)}\n            onChange={({ target }) => setPublished(target.value)}\n          />\n        </div>\n        <div>\n          <input\n            value={genre}\n            onChange={({ target }) => setGenre(target.value)}\n          />\n          <button onClick={addGenre} type=\"button\">add genre</button>\n        </div>\n        <div>\n          genres: {genres.join(' ')}\n        </div>\n        <button type='submit'>create book</button>\n      </form>\n    </div>\n  )\n}\n\nexport default NewBook\n","import React, { useState } from 'react'\nimport Authors from './components/Authors'\nimport Books from './components/Books'\nimport NewBook from './components/NewBook'\nimport { gql, useQuery } from '@apollo/client'\n\n\nconst ALL_AUTHORS = gql`\n  query {\n    allAuthors  {\n      name\n      born\n      bookCount\n      id\n    }\n  }\n`\n\nconst ALL_BOOKS = gql`\n  query {\n    allBooks  {\n      title\n      published\n      author\n      id\n    }\n  }\n`\n\nconst App = () => {\n\n  const resultOfAuthors = useQuery(ALL_AUTHORS, {\n    pollInterval: 2000\n  })\n  const resultOfBooks = useQuery(ALL_BOOKS, {\n    pollInterval: 2000\n  })\n  const [page, setPage] = useState('authors')\n\n  return (\n    <div>\n      <div>\n        <button onClick={() => setPage('authors')}>authors</button>\n        <button onClick={() => setPage('books')}>books</button>\n        <button onClick={() => setPage('add')}>add book</button>\n      </div>\n\n      <Authors\n        show={page === 'authors'} authors={resultOfAuthors.data.allAuthors}\n      />\n\n      <Books\n        show={page === 'books'} books={resultOfBooks.data.allBooks}\n      />\n\n      <NewBook\n        show={page === 'add'}\n      />\n\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache } from '@apollo/client'\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'http://localhost:4000',\n  })\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>, document.getElementById('root')\n)\n"],"sourceRoot":""}