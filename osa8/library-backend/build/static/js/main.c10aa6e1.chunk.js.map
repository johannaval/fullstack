{"version":3,"sources":["components/Authors.js","components/Books.js","components/NewBook.js","App.js","index.js"],"names":["Authors","props","show","authors","map","a","name","born","bookCount","Books","books","title","author","published","CREATE_BOOK","gql","NewBook","useState","setTitle","setAuthor","setPublished","genre","setGenre","genres","setGenres","useMutation","createBook","submit","event","preventDefault","variables","console","log","onSubmit","value","onChange","target","type","Number","onClick","concat","join","ALL_AUTHORS","ALL_BOOKS","App","resultOfAuthors","useQuery","resultOfBooks","page","setPage","data","allAuthors","allBooks","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.c10aa6e1.chunk.js","sourcesContent":["import React from 'react'\n\nconst Authors = (props) => {\n  if (!props.show) {\n    return null\n  }\n  const authors = props.authors\n\n  return (\n    <div>\n      <h2>authors</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>\n              born\n            </th>\n            <th>\n              books\n            </th>\n          </tr>\n          {authors.map(a =>\n            <tr key={a.name}>\n              <td>{a.name}</td>\n              <td>{a.born}</td>\n              <td>{a.bookCount}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n\n    </div>\n  )\n}\n\nexport default Authors","\nimport React from 'react'\n\nconst Books = (props) => {\n  if (!props.show) {\n    return null\n  }\n\n  const books = props.books\n\n  return (\n    <div>\n      <h2>books</h2>\n\n      <table>\n        <tbody>\n          <tr>\n            <th></th>\n            <th>\n              author\n            </th>\n            <th>\n              published\n            </th>\n          </tr>\n          {books.map(a =>\n            <tr key={a.title}>\n              <td>{a.title}</td>\n              <td>{a.author}</td>\n              <td>{a.published}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Books","import React, { useState } from 'react'\nimport { gql, useMutation } from '@apollo/client'\n\nconst CREATE_BOOK = gql`\nmutation createBook($title: String!, $author: String!, $published: Int!, $genres: [String!]!) {\n  addBook(\n    title: $title,\n    author: $author,\n    published: $published,\n    genres: $genres\n  ) {\n    title\n    author\n    published\n    genres\n  }\n}\n`\n\n\nconst NewBook = (props) => {\n  const [title, setTitle] = useState('')\n  const [author, setAuthor] = useState('')\n  const [published, setPublished] = useState('')\n  const [genre, setGenre] = useState('')\n  const [genres, setGenres] = useState([])\n\n  const [createBook] = useMutation(CREATE_BOOK)\n\n  if (!props.show) {\n    return null\n  }\n\n  const submit = async (event) => {\n    event.preventDefault()\n\n    createBook({ variables: { title, published, author, genres } })\n\n    console.log('add book...')\n\n    setTitle('')\n    setPublished('')\n    setAuthor('')\n    setGenres([])\n    setGenre('')\n  }\n\n  const addGenre = () => {\n    setGenres(genres.concat(genre))\n    setGenre('')\n  }\n\n  return (\n    <div>\n      <form onSubmit={submit}>\n        <div>\n          title\n          <input\n            value={title}\n            onChange={({ target }) => setTitle(target.value)}\n          />\n        </div>\n        <div>\n          author\n          <input\n            value={author}\n            onChange={({ target }) => setAuthor(target.value)}\n          />\n        </div>\n        <div>\n          published\n          <input\n            type='number'\n            value={Number(published)}\n            onChange={({ target }) => setPublished(target.value)}\n          />\n        </div>\n        <div>\n          <input\n            value={genre}\n            onChange={({ target }) => setGenre(target.value)}\n          />\n          <button onClick={addGenre} type=\"button\">add genre</button>\n        </div>\n        <div>\n          genres: {genres.join(' ')}\n        </div>\n        <button type='submit'>create book</button>\n      </form>\n    </div>\n  )\n}\n\nexport default NewBook\n","import React, { useState } from 'react'\nimport Authors from './components/Authors'\nimport Books from './components/Books'\nimport NewBook from './components/NewBook'\nimport { gql, useQuery } from '@apollo/client'\n\n\nconst ALL_AUTHORS = gql`\n  query {\n    allAuthors  {\n      name\n      born\n      bookCount\n      id\n    }\n  }\n`\n\nconst ALL_BOOKS = gql`\n  query {\n    allBooks  {\n      title\n      published\n      author\n      id\n    }\n  }\n`\n\nconst App = () => {\n\n  const resultOfAuthors = useQuery(ALL_AUTHORS)\n  const resultOfBooks = useQuery(ALL_BOOKS)\n  const [page, setPage] = useState('authors')\n\n\n  return (\n    <div>\n      <div>\n        <button onClick={() => setPage('authors')}>authors</button>\n        <button onClick={() => setPage('books')}>books</button>\n        <button onClick={() => setPage('add')}>add book</button>\n      </div>\n\n      <Authors\n        show={page === 'authors'} authors={resultOfAuthors.data.allAuthors}\n      />\n\n      <Books\n        show={page === 'books'} books={resultOfBooks.data.allBooks}\n      />\n\n      <NewBook\n        show={page === 'add'}\n      />\n\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache } from '@apollo/client'\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: 'http://localhost:4000',\n  })\n})\n\n ReactDOM.render(\n    <ApolloProvider client={client}>    \n    <App />\n    </ApolloProvider>,  document.getElementById('root')\n  )\n"],"sourceRoot":""}